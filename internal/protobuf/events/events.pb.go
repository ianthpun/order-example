// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: events/events.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreditTransferCategory int32

const (
	CreditTransferCategory_CREDIT_TRANSFER_NONE                              CreditTransferCategory = 0
	CreditTransferCategory_CREDIT_TRANSFER_GIFT_MARKETING                    CreditTransferCategory = 1
	CreditTransferCategory_CREDIT_TRANSFER_FEE_REIMBURSEMENT                 CreditTransferCategory = 2
	CreditTransferCategory_CREDIT_TRANSFER_RECLAIM                           CreditTransferCategory = 3
	CreditTransferCategory_CREDIT_TRANSFER_PAYMENT_ISSUE                     CreditTransferCategory = 4
	CreditTransferCategory_CREDIT_TRANSFER_REFILL                            CreditTransferCategory = 5
	CreditTransferCategory_CREDIT_TRANSFER_P2P_ORCH                          CreditTransferCategory = 6
	CreditTransferCategory_CREDIT_TRANSFER_PAY_ORCH                          CreditTransferCategory = 7
	CreditTransferCategory_CREDIT_TRANSFER_ACCOUNT_CONSOLIDATION             CreditTransferCategory = 8
	CreditTransferCategory_CREDIT_TRANSFER_OFFBOARD_WITHDRAWAL               CreditTransferCategory = 9
	CreditTransferCategory_CREDIT_TRANSFER_OFFBOARD_WITHDRAWAL_INITIAL_FLOAT CreditTransferCategory = 10
	CreditTransferCategory_CREDIT_TRANSFER_ORG_PAYOUT_METHOD_VERIFICATION    CreditTransferCategory = 11
	CreditTransferCategory_CREDIT_TRANSFER_ORG_PAYOUT                        CreditTransferCategory = 12
	CreditTransferCategory_CREDIT_TRANSFER_AIRDROPS                          CreditTransferCategory = 13
	CreditTransferCategory_CREDIT_TRANSFER_REIMBURSEMENT                     CreditTransferCategory = 14
	CreditTransferCategory_CREDIT_TRANSFER_USER_TO_USER                      CreditTransferCategory = 15
	CreditTransferCategory_CREDIT_TRANSFER_COMPENSATION                      CreditTransferCategory = 16
	CreditTransferCategory_CREDIT_TRANSFER_ORDER_DELIVERY                    CreditTransferCategory = 17
)

// Enum value maps for CreditTransferCategory.
var (
	CreditTransferCategory_name = map[int32]string{
		0:  "CREDIT_TRANSFER_NONE",
		1:  "CREDIT_TRANSFER_GIFT_MARKETING",
		2:  "CREDIT_TRANSFER_FEE_REIMBURSEMENT",
		3:  "CREDIT_TRANSFER_RECLAIM",
		4:  "CREDIT_TRANSFER_PAYMENT_ISSUE",
		5:  "CREDIT_TRANSFER_REFILL",
		6:  "CREDIT_TRANSFER_P2P_ORCH",
		7:  "CREDIT_TRANSFER_PAY_ORCH",
		8:  "CREDIT_TRANSFER_ACCOUNT_CONSOLIDATION",
		9:  "CREDIT_TRANSFER_OFFBOARD_WITHDRAWAL",
		10: "CREDIT_TRANSFER_OFFBOARD_WITHDRAWAL_INITIAL_FLOAT",
		11: "CREDIT_TRANSFER_ORG_PAYOUT_METHOD_VERIFICATION",
		12: "CREDIT_TRANSFER_ORG_PAYOUT",
		13: "CREDIT_TRANSFER_AIRDROPS",
		14: "CREDIT_TRANSFER_REIMBURSEMENT",
		15: "CREDIT_TRANSFER_USER_TO_USER",
		16: "CREDIT_TRANSFER_COMPENSATION",
		17: "CREDIT_TRANSFER_ORDER_DELIVERY",
	}
	CreditTransferCategory_value = map[string]int32{
		"CREDIT_TRANSFER_NONE":                              0,
		"CREDIT_TRANSFER_GIFT_MARKETING":                    1,
		"CREDIT_TRANSFER_FEE_REIMBURSEMENT":                 2,
		"CREDIT_TRANSFER_RECLAIM":                           3,
		"CREDIT_TRANSFER_PAYMENT_ISSUE":                     4,
		"CREDIT_TRANSFER_REFILL":                            5,
		"CREDIT_TRANSFER_P2P_ORCH":                          6,
		"CREDIT_TRANSFER_PAY_ORCH":                          7,
		"CREDIT_TRANSFER_ACCOUNT_CONSOLIDATION":             8,
		"CREDIT_TRANSFER_OFFBOARD_WITHDRAWAL":               9,
		"CREDIT_TRANSFER_OFFBOARD_WITHDRAWAL_INITIAL_FLOAT": 10,
		"CREDIT_TRANSFER_ORG_PAYOUT_METHOD_VERIFICATION":    11,
		"CREDIT_TRANSFER_ORG_PAYOUT":                        12,
		"CREDIT_TRANSFER_AIRDROPS":                          13,
		"CREDIT_TRANSFER_REIMBURSEMENT":                     14,
		"CREDIT_TRANSFER_USER_TO_USER":                      15,
		"CREDIT_TRANSFER_COMPENSATION":                      16,
		"CREDIT_TRANSFER_ORDER_DELIVERY":                    17,
	}
)

func (x CreditTransferCategory) Enum() *CreditTransferCategory {
	p := new(CreditTransferCategory)
	*p = x
	return p
}

func (x CreditTransferCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditTransferCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_events_events_proto_enumTypes[0].Descriptor()
}

func (CreditTransferCategory) Type() protoreflect.EnumType {
	return &file_events_events_proto_enumTypes[0]
}

func (x CreditTransferCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditTransferCategory.Descriptor instead.
func (CreditTransferCategory) EnumDescriptor() ([]byte, []int) {
	return file_events_events_proto_rawDescGZIP(), []int{0}
}

type CreditTransferSubCategory int32

const (
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_UNSPECIFIED              CreditTransferSubCategory = 0
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_OFFBOARDING_FLOAT        CreditTransferSubCategory = 1
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_PAYMENT_PROCESSING_ISSUE CreditTransferSubCategory = 2
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_USER_PROBLEM             CreditTransferSubCategory = 3
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_REVERSE_OFFBOARDING      CreditTransferSubCategory = 4
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_OFFBOARDING              CreditTransferSubCategory = 5
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_ACCOUNT_CONSOLIDATION    CreditTransferSubCategory = 6
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_FRAUD_PREVENTION         CreditTransferSubCategory = 7
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_WD_DELAYED_WIRE_RETURN   CreditTransferSubCategory = 8
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_ACCOUNT_CLOSURE          CreditTransferSubCategory = 9
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_PROMOTION_CAMPAIGN       CreditTransferSubCategory = 10
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_PRODUCT_ISSUE            CreditTransferSubCategory = 11
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_OPERATIONS_ISSUE         CreditTransferSubCategory = 12
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWALS              CreditTransferSubCategory = 13
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_FOREIGN_FEES             CreditTransferSubCategory = 14
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_MISSING_FUNDS            CreditTransferSubCategory = 15
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_PARTNERSHIP              CreditTransferSubCategory = 16
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_PARTNER_INTEGRATION      CreditTransferSubCategory = 17
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_REFILL                   CreditTransferSubCategory = 18
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_INTERNAL_TESTING         CreditTransferSubCategory = 19
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWAL               CreditTransferSubCategory = 20
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWAL_FEE           CreditTransferSubCategory = 21
	CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_CREDIT_HOLD              CreditTransferSubCategory = 22
)

// Enum value maps for CreditTransferSubCategory.
var (
	CreditTransferSubCategory_name = map[int32]string{
		0:  "CREDIT_TRANSFER_SUB_CATEGORY_UNSPECIFIED",
		1:  "CREDIT_TRANSFER_SUB_CATEGORY_OFFBOARDING_FLOAT",
		2:  "CREDIT_TRANSFER_SUB_CATEGORY_PAYMENT_PROCESSING_ISSUE",
		3:  "CREDIT_TRANSFER_SUB_CATEGORY_USER_PROBLEM",
		4:  "CREDIT_TRANSFER_SUB_CATEGORY_REVERSE_OFFBOARDING",
		5:  "CREDIT_TRANSFER_SUB_CATEGORY_OFFBOARDING",
		6:  "CREDIT_TRANSFER_SUB_CATEGORY_ACCOUNT_CONSOLIDATION",
		7:  "CREDIT_TRANSFER_SUB_CATEGORY_FRAUD_PREVENTION",
		8:  "CREDIT_TRANSFER_SUB_CATEGORY_WD_DELAYED_WIRE_RETURN",
		9:  "CREDIT_TRANSFER_SUB_CATEGORY_ACCOUNT_CLOSURE",
		10: "CREDIT_TRANSFER_SUB_CATEGORY_PROMOTION_CAMPAIGN",
		11: "CREDIT_TRANSFER_SUB_CATEGORY_PRODUCT_ISSUE",
		12: "CREDIT_TRANSFER_SUB_CATEGORY_OPERATIONS_ISSUE",
		13: "CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWALS",
		14: "CREDIT_TRANSFER_SUB_CATEGORY_FOREIGN_FEES",
		15: "CREDIT_TRANSFER_SUB_CATEGORY_MISSING_FUNDS",
		16: "CREDIT_TRANSFER_SUB_CATEGORY_PARTNERSHIP",
		17: "CREDIT_TRANSFER_SUB_CATEGORY_PARTNER_INTEGRATION",
		18: "CREDIT_TRANSFER_SUB_CATEGORY_REFILL",
		19: "CREDIT_TRANSFER_SUB_CATEGORY_INTERNAL_TESTING",
		20: "CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWAL",
		21: "CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWAL_FEE",
		22: "CREDIT_TRANSFER_SUB_CATEGORY_CREDIT_HOLD",
	}
	CreditTransferSubCategory_value = map[string]int32{
		"CREDIT_TRANSFER_SUB_CATEGORY_UNSPECIFIED":              0,
		"CREDIT_TRANSFER_SUB_CATEGORY_OFFBOARDING_FLOAT":        1,
		"CREDIT_TRANSFER_SUB_CATEGORY_PAYMENT_PROCESSING_ISSUE": 2,
		"CREDIT_TRANSFER_SUB_CATEGORY_USER_PROBLEM":             3,
		"CREDIT_TRANSFER_SUB_CATEGORY_REVERSE_OFFBOARDING":      4,
		"CREDIT_TRANSFER_SUB_CATEGORY_OFFBOARDING":              5,
		"CREDIT_TRANSFER_SUB_CATEGORY_ACCOUNT_CONSOLIDATION":    6,
		"CREDIT_TRANSFER_SUB_CATEGORY_FRAUD_PREVENTION":         7,
		"CREDIT_TRANSFER_SUB_CATEGORY_WD_DELAYED_WIRE_RETURN":   8,
		"CREDIT_TRANSFER_SUB_CATEGORY_ACCOUNT_CLOSURE":          9,
		"CREDIT_TRANSFER_SUB_CATEGORY_PROMOTION_CAMPAIGN":       10,
		"CREDIT_TRANSFER_SUB_CATEGORY_PRODUCT_ISSUE":            11,
		"CREDIT_TRANSFER_SUB_CATEGORY_OPERATIONS_ISSUE":         12,
		"CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWALS":              13,
		"CREDIT_TRANSFER_SUB_CATEGORY_FOREIGN_FEES":             14,
		"CREDIT_TRANSFER_SUB_CATEGORY_MISSING_FUNDS":            15,
		"CREDIT_TRANSFER_SUB_CATEGORY_PARTNERSHIP":              16,
		"CREDIT_TRANSFER_SUB_CATEGORY_PARTNER_INTEGRATION":      17,
		"CREDIT_TRANSFER_SUB_CATEGORY_REFILL":                   18,
		"CREDIT_TRANSFER_SUB_CATEGORY_INTERNAL_TESTING":         19,
		"CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWAL":               20,
		"CREDIT_TRANSFER_SUB_CATEGORY_WITHDRAWAL_FEE":           21,
		"CREDIT_TRANSFER_SUB_CATEGORY_CREDIT_HOLD":              22,
	}
)

func (x CreditTransferSubCategory) Enum() *CreditTransferSubCategory {
	p := new(CreditTransferSubCategory)
	*p = x
	return p
}

func (x CreditTransferSubCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditTransferSubCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_events_events_proto_enumTypes[1].Descriptor()
}

func (CreditTransferSubCategory) Type() protoreflect.EnumType {
	return &file_events_events_proto_enumTypes[1]
}

func (x CreditTransferSubCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditTransferSubCategory.Descriptor instead.
func (CreditTransferSubCategory) EnumDescriptor() ([]byte, []int) {
	return file_events_events_proto_rawDescGZIP(), []int{1}
}

type CreditTransferType int32

const (
	CreditTransferType_OFF_CHAIN CreditTransferType = 0
	CreditTransferType_ON_CHAIN  CreditTransferType = 1
)

// Enum value maps for CreditTransferType.
var (
	CreditTransferType_name = map[int32]string{
		0: "OFF_CHAIN",
		1: "ON_CHAIN",
	}
	CreditTransferType_value = map[string]int32{
		"OFF_CHAIN": 0,
		"ON_CHAIN":  1,
	}
)

func (x CreditTransferType) Enum() *CreditTransferType {
	p := new(CreditTransferType)
	*p = x
	return p
}

func (x CreditTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_events_events_proto_enumTypes[2].Descriptor()
}

func (CreditTransferType) Type() protoreflect.EnumType {
	return &file_events_events_proto_enumTypes[2]
}

func (x CreditTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditTransferType.Descriptor instead.
func (CreditTransferType) EnumDescriptor() ([]byte, []int) {
	return file_events_events_proto_rawDescGZIP(), []int{2}
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName         string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventId           string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	RequestId         string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TraceId           string `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId            string `protobuf:"bytes,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ReplyTopic        string `protobuf:"bytes,6,opt,name=reply_topic,json=replyTopic,proto3" json:"reply_topic,omitempty"`
	TemporalTaskToken string `protobuf:"bytes,7,opt,name=temporal_task_token,json=temporalTaskToken,proto3" json:"temporal_task_token,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_events_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_events_events_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Header) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Header) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Header) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Header) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *Header) GetReplyTopic() string {
	if x != nil {
		return x.ReplyTopic
	}
	return ""
}

func (x *Header) GetTemporalTaskToken() string {
	if x != nil {
		return x.TemporalTaskToken
	}
	return ""
}

type CreditTransferRequested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header                       *Header                   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SenderUserId                 string                    `protobuf:"bytes,2,opt,name=sender_user_id,json=senderUserId,proto3" json:"sender_user_id,omitempty"`
	RecipientUserId              string                    `protobuf:"bytes,3,opt,name=recipient_user_id,json=recipientUserId,proto3" json:"recipient_user_id,omitempty"`
	Amount                       uint64                    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	ReserveReceivedCredits       bool                      `protobuf:"varint,5,opt,name=reserve_received_credits,json=reserveReceivedCredits,proto3" json:"reserve_received_credits,omitempty"`
	ReleaseSpentReservation      bool                      `protobuf:"varint,6,opt,name=release_spent_reservation,json=releaseSpentReservation,proto3" json:"release_spent_reservation,omitempty"`
	Type                         CreditTransferType        `protobuf:"varint,7,opt,name=type,proto3,enum=CreditTransferType" json:"type,omitempty"`
	BlockchainAddress            string                    `protobuf:"bytes,8,opt,name=blockchain_address,json=blockchainAddress,proto3" json:"blockchain_address,omitempty"`
	Description                  string                    `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	IsManual                     bool                      `protobuf:"varint,10,opt,name=is_manual,json=isManual,proto3" json:"is_manual,omitempty"`
	IsVisibleToUser              bool                      `protobuf:"varint,11,opt,name=is_visible_to_user,json=isVisibleToUser,proto3" json:"is_visible_to_user,omitempty"`
	ReceivedCreditsNonRedeemable bool                      `protobuf:"varint,12,opt,name=received_credits_non_redeemable,json=receivedCreditsNonRedeemable,proto3" json:"received_credits_non_redeemable,omitempty"` // this will add non redeemable credit to the recipient
	SpendNonRedeemableCredit     bool                      `protobuf:"varint,13,opt,name=spend_non_redeemable_credit,json=spendNonRedeemableCredit,proto3" json:"spend_non_redeemable_credit,omitempty"`             // this will deduct non redeemable credit from sender
	ReversalTargetTransferRefId  string                    `protobuf:"bytes,14,opt,name=reversal_target_transfer_ref_id,json=reversalTargetTransferRefId,proto3" json:"reversal_target_transfer_ref_id,omitempty"`   // this tells payments api how much nrc to add back by looking up the nrc deducted from original transfer
	TransferCategory             CreditTransferCategory    `protobuf:"varint,15,opt,name=transfer_category,json=transferCategory,proto3,enum=CreditTransferCategory" json:"transfer_category,omitempty"`
	OptimisticTransferEnabled    bool                      `protobuf:"varint,16,opt,name=optimistic_transfer_enabled,json=optimisticTransferEnabled,proto3" json:"optimistic_transfer_enabled,omitempty"`
	TemporalTaskToken            string                    `protobuf:"bytes,17,opt,name=temporal_task_token,json=temporalTaskToken,proto3" json:"temporal_task_token,omitempty"`
	EncryptedPii                 string                    `protobuf:"bytes,18,opt,name=encrypted_pii,json=encryptedPii,proto3" json:"encrypted_pii,omitempty"`
	TransferSubCategory          CreditTransferSubCategory `protobuf:"varint,19,opt,name=transfer_sub_category,json=transferSubCategory,proto3,enum=CreditTransferSubCategory" json:"transfer_sub_category,omitempty"`
}

func (x *CreditTransferRequested) Reset() {
	*x = CreditTransferRequested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditTransferRequested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditTransferRequested) ProtoMessage() {}

func (x *CreditTransferRequested) ProtoReflect() protoreflect.Message {
	mi := &file_events_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditTransferRequested.ProtoReflect.Descriptor instead.
func (*CreditTransferRequested) Descriptor() ([]byte, []int) {
	return file_events_events_proto_rawDescGZIP(), []int{1}
}

func (x *CreditTransferRequested) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreditTransferRequested) GetSenderUserId() string {
	if x != nil {
		return x.SenderUserId
	}
	return ""
}

func (x *CreditTransferRequested) GetRecipientUserId() string {
	if x != nil {
		return x.RecipientUserId
	}
	return ""
}

func (x *CreditTransferRequested) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreditTransferRequested) GetReserveReceivedCredits() bool {
	if x != nil {
		return x.ReserveReceivedCredits
	}
	return false
}

func (x *CreditTransferRequested) GetReleaseSpentReservation() bool {
	if x != nil {
		return x.ReleaseSpentReservation
	}
	return false
}

func (x *CreditTransferRequested) GetType() CreditTransferType {
	if x != nil {
		return x.Type
	}
	return CreditTransferType_OFF_CHAIN
}

func (x *CreditTransferRequested) GetBlockchainAddress() string {
	if x != nil {
		return x.BlockchainAddress
	}
	return ""
}

func (x *CreditTransferRequested) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreditTransferRequested) GetIsManual() bool {
	if x != nil {
		return x.IsManual
	}
	return false
}

func (x *CreditTransferRequested) GetIsVisibleToUser() bool {
	if x != nil {
		return x.IsVisibleToUser
	}
	return false
}

func (x *CreditTransferRequested) GetReceivedCreditsNonRedeemable() bool {
	if x != nil {
		return x.ReceivedCreditsNonRedeemable
	}
	return false
}

func (x *CreditTransferRequested) GetSpendNonRedeemableCredit() bool {
	if x != nil {
		return x.SpendNonRedeemableCredit
	}
	return false
}

func (x *CreditTransferRequested) GetReversalTargetTransferRefId() string {
	if x != nil {
		return x.ReversalTargetTransferRefId
	}
	return ""
}

func (x *CreditTransferRequested) GetTransferCategory() CreditTransferCategory {
	if x != nil {
		return x.TransferCategory
	}
	return CreditTransferCategory_CREDIT_TRANSFER_NONE
}

func (x *CreditTransferRequested) GetOptimisticTransferEnabled() bool {
	if x != nil {
		return x.OptimisticTransferEnabled
	}
	return false
}

func (x *CreditTransferRequested) GetTemporalTaskToken() string {
	if x != nil {
		return x.TemporalTaskToken
	}
	return ""
}

func (x *CreditTransferRequested) GetEncryptedPii() string {
	if x != nil {
		return x.EncryptedPii
	}
	return ""
}

func (x *CreditTransferRequested) GetTransferSubCategory() CreditTransferSubCategory {
	if x != nil {
		return x.TransferSubCategory
	}
	return CreditTransferSubCategory_CREDIT_TRANSFER_SUB_CATEGORY_UNSPECIFIED
}

type CreditTransferComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Succeeded         bool                   `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Detail            string                 `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	SenderUserId      string                 `protobuf:"bytes,4,opt,name=sender_user_id,json=senderUserId,proto3" json:"sender_user_id,omitempty"`
	RecipientUserId   string                 `protobuf:"bytes,5,opt,name=recipient_user_id,json=recipientUserId,proto3" json:"recipient_user_id,omitempty"`
	Amount            uint64                 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	ProcessedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	Type              CreditTransferType     `protobuf:"varint,8,opt,name=type,proto3,enum=CreditTransferType" json:"type,omitempty"`
	BlockchainTxHash  string                 `protobuf:"bytes,9,opt,name=blockchain_tx_hash,json=blockchainTxHash,proto3" json:"blockchain_tx_hash,omitempty"`
	IsManual          bool                   `protobuf:"varint,10,opt,name=is_manual,json=isManual,proto3" json:"is_manual,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Description       string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	IsVisibleToUser   bool                   `protobuf:"varint,13,opt,name=is_visible_to_user,json=isVisibleToUser,proto3" json:"is_visible_to_user,omitempty"`
	TransferCategory  CreditTransferCategory `protobuf:"varint,14,opt,name=transfer_category,json=transferCategory,proto3,enum=CreditTransferCategory" json:"transfer_category,omitempty"`
	TemporalTaskToken string                 `protobuf:"bytes,15,opt,name=temporal_task_token,json=temporalTaskToken,proto3" json:"temporal_task_token,omitempty"`
}

func (x *CreditTransferComplete) Reset() {
	*x = CreditTransferComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditTransferComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditTransferComplete) ProtoMessage() {}

func (x *CreditTransferComplete) ProtoReflect() protoreflect.Message {
	mi := &file_events_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditTransferComplete.ProtoReflect.Descriptor instead.
func (*CreditTransferComplete) Descriptor() ([]byte, []int) {
	return file_events_events_proto_rawDescGZIP(), []int{2}
}

func (x *CreditTransferComplete) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreditTransferComplete) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *CreditTransferComplete) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *CreditTransferComplete) GetSenderUserId() string {
	if x != nil {
		return x.SenderUserId
	}
	return ""
}

func (x *CreditTransferComplete) GetRecipientUserId() string {
	if x != nil {
		return x.RecipientUserId
	}
	return ""
}

func (x *CreditTransferComplete) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreditTransferComplete) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *CreditTransferComplete) GetType() CreditTransferType {
	if x != nil {
		return x.Type
	}
	return CreditTransferType_OFF_CHAIN
}

func (x *CreditTransferComplete) GetBlockchainTxHash() string {
	if x != nil {
		return x.BlockchainTxHash
	}
	return ""
}

func (x *CreditTransferComplete) GetIsManual() bool {
	if x != nil {
		return x.IsManual
	}
	return false
}

func (x *CreditTransferComplete) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreditTransferComplete) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreditTransferComplete) GetIsVisibleToUser() bool {
	if x != nil {
		return x.IsVisibleToUser
	}
	return false
}

func (x *CreditTransferComplete) GetTransferCategory() CreditTransferCategory {
	if x != nil {
		return x.TransferCategory
	}
	return CreditTransferCategory_CREDIT_TRANSFER_NONE
}

func (x *CreditTransferComplete) GetTemporalTaskToken() string {
	if x != nil {
		return x.TemporalTaskToken
	}
	return ""
}

var File_events_events_proto protoreflect.FileDescriptor

var file_events_events_proto_rawDesc = []byte{
	0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xd5, 0x07, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x70, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x69, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x50, 0x69, 0x69, 0x12, 0x4e, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x8c, 0x05, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x9d, 0x05, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x47,
	0x49, 0x46, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x42, 0x55, 0x52, 0x53, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4c, 0x4c,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x32, 0x50, 0x5f, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x06,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x07, 0x12, 0x29,
	0x0a, 0x25, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c,
	0x10, 0x09, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x47,
	0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x0c, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x41, 0x49, 0x52, 0x44, 0x52, 0x4f, 0x50, 0x53, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x49, 0x4d, 0x42, 0x55, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0f,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x11, 0x2a, 0x92, 0x09, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x03,
	0x12, 0x34, 0x0a, 0x30, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x37, 0x0a, 0x33, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x57, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x52, 0x45, 0x44,
	0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x10, 0x0a, 0x12,
	0x2e, 0x0a, 0x2a, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x0b, 0x12,
	0x31, 0x0a, 0x2d, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x53, 0x10, 0x0d,
	0x12, 0x2d, 0x0a, 0x29, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x0e, 0x12,
	0x2e, 0x0a, 0x2a, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x0f, 0x12,
	0x2c, 0x0a, 0x28, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x10, 0x12, 0x34, 0x0a,
	0x30, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x12, 0x12, 0x31, 0x0a, 0x2d,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12,
	0x2b, 0x0a, 0x27, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x2f, 0x0a, 0x2b,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x15, 0x12, 0x2c, 0x0a,
	0x28, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x16, 0x2a, 0x31, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x42, 0x36,
	0x42, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x25, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_events_proto_rawDescOnce sync.Once
	file_events_events_proto_rawDescData = file_events_events_proto_rawDesc
)

func file_events_events_proto_rawDescGZIP() []byte {
	file_events_events_proto_rawDescOnce.Do(func() {
		file_events_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_events_proto_rawDescData)
	})
	return file_events_events_proto_rawDescData
}

var file_events_events_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_events_events_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_events_events_proto_goTypes = []interface{}{
	(CreditTransferCategory)(0),     // 0: CreditTransferCategory
	(CreditTransferSubCategory)(0),  // 1: CreditTransferSubCategory
	(CreditTransferType)(0),         // 2: CreditTransferType
	(*Header)(nil),                  // 3: Header
	(*CreditTransferRequested)(nil), // 4: CreditTransferRequested
	(*CreditTransferComplete)(nil),  // 5: CreditTransferComplete
	(*timestamppb.Timestamp)(nil),   // 6: google.protobuf.Timestamp
}
var file_events_events_proto_depIdxs = []int32{
	3, // 0: CreditTransferRequested.header:type_name -> Header
	2, // 1: CreditTransferRequested.type:type_name -> CreditTransferType
	0, // 2: CreditTransferRequested.transfer_category:type_name -> CreditTransferCategory
	1, // 3: CreditTransferRequested.transfer_sub_category:type_name -> CreditTransferSubCategory
	3, // 4: CreditTransferComplete.header:type_name -> Header
	6, // 5: CreditTransferComplete.processed_at:type_name -> google.protobuf.Timestamp
	2, // 6: CreditTransferComplete.type:type_name -> CreditTransferType
	6, // 7: CreditTransferComplete.created_at:type_name -> google.protobuf.Timestamp
	0, // 8: CreditTransferComplete.transfer_category:type_name -> CreditTransferCategory
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_events_events_proto_init() }
func file_events_events_proto_init() {
	if File_events_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_events_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditTransferRequested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditTransferComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_events_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_events_events_proto_goTypes,
		DependencyIndexes: file_events_events_proto_depIdxs,
		EnumInfos:         file_events_events_proto_enumTypes,
		MessageInfos:      file_events_events_proto_msgTypes,
	}.Build()
	File_events_events_proto = out.File
	file_events_events_proto_rawDesc = nil
	file_events_events_proto_goTypes = nil
	file_events_events_proto_depIdxs = nil
}
